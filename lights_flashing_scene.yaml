blueprint:
  name: Lights flashing scene
  description: 'Flashing lights via scene then off and delay and finally restore the previous
    light states.

    '
  domain: automation
  source_url: https://github.com/myGithub-Markus/home-assistant_blueprints/blob/main/flashing_lights.yaml
  input:
    activated:
      name: Activated
      description: Toggle to activate or deactivate flashing lights.
      selector:
        entity:
          domain: input_boolean
    scene_activate:
      name: Scene to Activate2
      description: What scene should be activated to turn the lights on
      default: scene.none
      selector:
        entity:
          domain: scene
    #target_lights:
    #  name: Lights
    #  description: To flashing lights
    #  selector:
    #    target:
    #      entity:
    #        domain: light
    delay:
      name: (OPTIONAL) Delay
      description: Delay flashing lights
      default: 1000
      selector:
        number:
          min: 0.0
          max: 20000.0
          unit_of_measurement: milliseconds
          mode: slider
          step: 1.0
mode: restart
max_exceeded: silent
trigger:
- platform: state
  entity_id: !input 'activated'
  to: 'on'
variables:
  activated: !input 'activated'
  delay: !input 'delay'
  #target_lights: !input 'target_lights'
  scene_activate: !input 'scene_activate'
condition: []
action:
- service: scene.create
  data:
    scene_id: all_lights_snapshot
    snapshot_entities: "{% set lights = states.light\n  | map(attribute='entity_id')\
      \ | join(',') %}\n  {{lights}}\n"
- service: scene.turn_on
  #target: !input 'target_lights'
  target:
    entity_id: !input 'scene_activate'
  data:
    transition: 0
  #  brightness_pct: 100
  #  color_name: red
  #  transition: 0
- delay:
    milliseconds: '{{ delay }}'
- repeat:
    while:
    - condition: template
      value_template: '{{ activated == none or is_state(activated, "on") }}'
    sequence:
    - delay:
        milliseconds: '{{ delay }}'
    - service: light.turn_off
      target:
        entity_id: all
      data:
        transition: 0
    - delay:
        milliseconds: '{{ delay }}'
    - service: scene.turn_on
      #target: !input 'target_lights'
      target:
        entity_id: !input 'scene_activate'
      data:
        transition: 0
- service: scene.turn_on
  data:
    entity_id: scene.all_lights_snapshot
